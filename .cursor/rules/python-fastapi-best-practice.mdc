---
description: 
globs: 
alwaysApply: true
---

## Python & Environment
- Use Python 3.12.
- Manage dependencies strictly via Poetry.
- Use Alembic for database migration.
- Use venv / Poetry environment isolation, do not pollute global environment.

## Frameworks and Libraries
- Framework: FastAPI
- Data validation: Pydantic (latest)
- ORM: SQLAlchemy 2.0
- User management: fastapi-users
- Authentication: fastapi-jwt-auth
- Email sending: fastapi-mail
- Caching: fastapi-cache
- Rate limiting: fastapi-limiter
- Pagination: fastapi-pagination
- API Documentation: OpenAPI 3.0 auto-generated by FastAPI
- SDK Generation: Support using OpenAPI Generator to export client SDKs (e.g., Typescript-Axios)

## Code Style
- Strictly follow PEP8.
- Use `black` for code formatting.
- Use `isort` to organize import statements.
- Use `flake8` to enforce linting.
- Write meaningful, descriptive names for all variables, functions, and classes.
- Avoid magic numbers and strings; extract constants.
- Full type hinting is mandatory for all functions and classes.
- Always use Docstrings following Google style.

## Project Structure
- Modularize by domain (not purely technical split).
- Use `APIRouter` for route grouping.
- Always version APIs (`/api/v1/...`).
- Separate layers clearly: Routers, Services, Models, Schemas, Deps, Core, Utils, Middlewares.
- Request & Response must be defined via Pydantic Schemas.
- Do not expose ORM models directly to API layer.

## Dependency Injection
- All external dependencies (DB, Authentication, etc.) must be injected via `Depends()`.

## Exception Handling
- Catch exceptions gracefully using try-except blocks.
- Define global exception handlers (e.g., HTTPException, ValidationError).
- Return standardized error response format: `{ "code": int, "message": str, "details": Optional[str] }`.

## API Security
- Use JWT authentication (fastapi-jwt-auth) by default.
- Apply IP rate limiting to public APIs (fastapi-limiter).
- Apply CORS rules to APIs via middleware.
- Always validate input data via Pydantic.

## Performance
- Use fastapi-cache to cache hot data endpoints.
- Use async/await properly to maximize concurrency.
- Use Gunicorn + Uvicorn Workers in production.
- Use database connection pooling.

## Documentation
- All APIs must be documented automatically via FastAPI OpenAPI integration.
- Support exporting OpenAPI JSON file.
- Allow frontend teams to generate SDKs based on OpenAPI JSON (e.g., Typescript-Axios SDK).

## Testing
- Use pytest for all unit tests.
- Test coverage must be greater than 80%.
- Include tests for:
  - API endpoints
  - Service logic
  - Database models
- Run tests automatically in CI/CD pipelines.

## Deployment
- Package applications via Docker.
- Deploy using Gunicorn + Uvicorn Workers.
- Use Nginx as reverse proxy.
- Add Prometheus metrics if needed for monitoring.
- Monitor production errors via Sentry or similar service.

## Other Rules
- Prefer list comprehensions over traditional loops where appropriate.
- Minimize global variables.
- Break down large functions (>50 lines) into smaller helper functions.
- Use BackgroundTasks for post-response processing (e.g., send email).
- Use StreamingResponse for large file downloads or realtime data streams.

# Final Note
- Always prioritize clarity, maintainability, scalability.
- Code is read much more often than it is written. Favor readability.