---
description: 项目结构总览
globs: 
alwaysApply: false
---
# 项目结构总览

本项目是一个企业级知识库平台，基于FastAPI、LlamaIndex、Pydantic v2和Milvus构建，以下是项目的整体结构。

## 目录结构

- **enterprise_kb/**: 主项目目录
  - **api/**: API层，包含所有路由和端点
    - **dependencies/**: 依赖注入和中间件
    - **endpoints/**: API端点和路由器
    - **middlewares/**: API中间件
  - **config/**: 配置模块，包含应用设置
  - **core/**: 核心功能实现
    - **config/**: 核心配置
    - **middleware/**: 核心中间件
  - **db/**: 数据库相关组件
    - **models/**: 数据库模型
    - **repositories/**: 数据访问仓库
  - **models/**: 应用模型和实体
  - **schemas/**: Pydantic模型和验证器
  - **scripts/**: 实用脚本和工具
  - **services/**: 业务逻辑服务
  - **storage/**: 文件存储和管理
  - **tests/**: 单元测试和集成测试
  - **utils/**: 通用工具和辅助函数
- **migrations/**: 数据库迁移脚本
  - **versions/**: Alembic版本迁移文件
- **.cursor/**: Cursor编辑器规则
  - **rules/**: 项目导航和理解规则
- **alembic.ini**: Alembic配置文件
- **pyproject.toml**: 项目依赖和构建配置
- **requirements.txt**: 项目依赖列表

## 架构层次

项目采用分层架构设计:

1. **表示层**: API路由和端点
2. **业务层**: 服务和业务逻辑
3. **数据访问层**: 仓库和数据模型
4. **基础设施层**: 配置、工具和核心功能

## 技术栈

- **Web框架**: FastAPI
- **ORM**: SQLAlchemy
- **数据验证**: Pydantic v2
- **向量数据库**: Milvus
- **文本处理**: LlamaIndex
- **认证**: FastAPI-Users + JWT
- **缓存**: Redis + FastAPI-Cache
- **任务队列**: Celery
- **数据库**: PostgreSQL
- **迁移工具**: Alembic

## 开发指南

- 遵循PEP 8风格指南
- 使用类型注解提高代码可读性
- 实现单元测试和文档
- 使用依赖注入实现松耦合

# 企业知识库平台项目结构

## 项目概述
这是一个企业知识库平台项目，使用FastAPI构建，支持文档处理、向量检索和问答功能。项目支持多种AI模型提供商，包括OpenAI和DashScope。

## 核心配置
- 主要配置文件: [enterprise_kb/core/config/settings.py](mdc:enterprise_kb/core/config/settings.py)
- 环境变量示例: [.env.example](mdc:.env.example)

## 模型提供商集成
项目支持两种主要的模型提供商:
1. **OpenAI** - 默认提供商
2. **DashScope** - 阿里云提供的替代模型

### 切换模型提供商
在`.env`文件中设置以下环境变量来选择模型提供商:
```
EMBEDDING_PROVIDER="dashscope" # 或 "openai"
LLM_PROVIDER="dashscope" # 或 "openai"
```

### 关键实现文件
- 模型配置: [enterprise_kb/core/config/settings.py](mdc:enterprise_kb/core/config/settings.py)
- 文档处理器: [enterprise_kb/storage/document_processor.py](mdc:enterprise_kb/storage/document_processor.py)
- Milvus向量存储: [enterprise_kb/storage/datasource/milvus.py](mdc:enterprise_kb/storage/datasource/milvus.py)
- 混合检索: [enterprise_kb/core/hybrid_retrieval.py](mdc:enterprise_kb/core/hybrid_retrieval.py)

## 测试结构
- DashScope直接测试: [tests/core/test_dashscope_direct.py](mdc:tests/core/test_dashscope_direct.py)
- DashScope集成测试: [tests/core/test_dashscope_integration.py](mdc:tests/core/test_dashscope_integration.py)

## 重要API参数
- DashScope Embedding模型使用`model_name`参数 (不是`model`)
- DashScope LLM模型使用`model_name`参数 (不是`model`)
- OpenAI模型使用`model`参数

## 向量维度配置
默认向量维度设置为1536，与DashScope和OpenAI的默认嵌入维度一致。如果更改模型，需要确保维度匹配:
```python
MILVUS_DIMENSION: int = 1536  # 默认嵌入向量维度
```
