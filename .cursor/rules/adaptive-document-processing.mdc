---
description: 自适应文档处理系统
globs: 
alwaysApply: false
---
# 自适应文档处理系统

本规则详细描述了企业知识库平台中的自适应文档处理系统，这是平台的核心创新特性。

## 系统架构

自适应文档处理系统由以下几个主要组件构成：

1. **文档分析器**：[DocumentAnalyzer](mdc:enterprise_kb/storage/document_processor.py) - 分析文档特征和复杂度
2. **处理决策引擎**：[determine_processing_strategy](mdc:enterprise_kb/storage/document_processor.py) - 决定最佳处理路径
3. **自适应分块策略**：[AdaptiveChunkingStrategy](mdc:enterprise_kb/storage/document_processor.py) - 优化分块参数
4. **Markdown转换器**：集成MarkItDown库实现高质量文档转换

## 文档特征分析

[DocumentFeatures](mdc:enterprise_kb/storage/document_processor.py)类捕获文档的以下特征：

- 页数和文本密度
- 表格、图片、代码等特殊内容存在
- 语言和结构层级
- 估计的令牌数量
- 句子长度和复杂度

分析方法包括：

- `_analyze_pdf` - PDF文档分析
- `_analyze_word` - Word文档分析
- `_analyze_markdown` - Markdown文档分析
- `_analyze_code` - 代码文件分析
- `_analyze_table` - 表格数据分析

## 复杂度评估

[DocumentComplexity](mdc:enterprise_kb/storage/document_processor.py)类定义了三个复杂度级别：

1. **LOW** - 简单文本，直接处理
2. **MEDIUM** - 中等复杂度，需要标准处理
3. **HIGH** - 高复杂度，需要特殊处理

复杂度评估基于：
- 文档大小和令牌数
- 特殊元素存在（表格、图片）
- 结构复杂性
- 语言特性

## 处理路径决策

系统会根据文档分析结果决定：

1. 是否将文档转换为Markdown
2. 使用哪种分块策略
3. 最佳的分块参数（块大小、重叠度）

决策规则包括：
- 代码文件通常不转换为Markdown
- 复杂度低的文本文件可以直接处理
- 表格数据通常保持原格式
- HTML文件根据复杂度决定是否转换
- 其他文档类型默认转换为Markdown

## 自适应分块策略

针对不同文档类型优化的分块策略：

- Markdown文档 - 使用专用的Markdown解析器
- 代码文件 - 使用代码分块器，保留语义结构
- 表格数据 - 优化行列处理，减少重叠
- PDF文档 - 根据图表密度调整分块
- 文本文件 - 根据句子长度调整

## API集成

提供了以下API端点：

- [/documents](mdc:enterprise_kb/api/documents_extended.py) - 上传并智能处理文档
- [/documents/analyze](mdc:enterprise_kb/api/documents_extended.py) - 仅分析文档，获取建议处理策略
- [/documents/batch/process](mdc:enterprise_kb/api/documents_extended.py) - 批量智能处理文档

## 工作流示例

1. 上传PDF文档
2. 分析器检测到多个表格和图片，评估为高复杂度
3. 决策引擎确定需要转换为Markdown
4. 使用小块大小和较大重叠进行分块
5. 文档被索引到向量数据库

## 扩展指南

添加新的文档类型支持：
1. 在`DocumentAnalyzer`中添加新的分析方法
2. 在`_should_convert_to_markdown`中添加处理逻辑
3. 在`AdaptiveChunkingStrategy`中添加相应的分块参数优化
